#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
# git-meta --- Handle file metadata in git

"""

# Copyright © 2014 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Created: 2014-02-26
# Last changed: 2014-07-25 00:12:20

# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.


__author__ = "Sébastien Gross"
__copyright__ = """Copyright © 2014 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>"""

import os, sys, subprocess
import pipes
from stat import *
import pwd
import grp
import json
import argparse
import datetime
import re

#
# Local classes
#
class Msg:
    """Print messages to the user."""

    INFO = ('\033[95m●', '[I]')
    DEBUG = ('\033[94m✓', '[D]')
    OK = ('\033[92m✔', '[O]')
    WARN = ('\033[93m❢', '[W]')
    ERROR = ('\033[91m✘', '[E]')
    OUT = ('\033[92m', '1>')
    ERR = ('\033[91m', '2>')
    ENDC = '\033[0m'

    @staticmethod
    def __do_print(m, header, stream=sys.stdout, full_color=False):
        if stream.isatty():
            if full_color:
                stream.write(header[0] + m + Msg.ENDC)
            else:
                stream.write(header[0] + Msg.ENDC + ' ' + m)
        else:
            stream.write(header[1] + m)
        stream.write('\n')
        stream.flush()

    @staticmethod
    def ok(m, stream=sys.stdout, full_color=False):
        Msg.__do_print(m, Msg.OK, stream=stream, full_color=full_color)
        
    @staticmethod
    def warn(m, stream=sys.stdout, full_color=False):
        Msg.__do_print(m, Msg.WARN, stream=stream, full_color=full_color)

    @staticmethod
    def debug(m, stream=sys.stdout, full_color=False):
        Msg.__do_print(m, Msg.DEBUG, stream=stream, full_color=full_color)

    @staticmethod
    def error(m, stream=sys.stdout, full_color=False):
        Msg.__do_print(m, Msg.ERROR, stream=stream, full_color=full_color)

    @staticmethod
    def info(m, stream=sys.stdout, full_color=False):
        Msg.__do_print(m, Msg.INFO, stream=stream, full_color=full_color)

    @staticmethod
    def out(m, stream=sys.stdout, full_color=False):
        Msg.__do_print(m, Msg.OUT, stream=stream, full_color=full_color)

    @staticmethod
    def err(m, stream=sys.stderr, full_color=False):
        Msg.__do_print(m, Msg.ERR, stream=stream, full_color=full_color)


properties = {
    'mode': {
        'set': lambda x: int(x, 8),
        'restore': lambda f, x : os.chmod(f, x)
    }
}

def run(cmd, ignore_errors=False):
    """run cmd"""
    proc = subprocess.Popen(cmd,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    proc.wait()
    out, err = proc.communicate()
    rc = proc.returncode
    if rc == 0 or ignore_errors:
        return out
    else:
        sys.stdout.write("Failed (%s): %s\n" %
                         (rc, ' '.join(pipes.quote(arg) for arg in cmd)))
        sys.stderr.write(err)
        sys.exit(1)


def file_in_git(filename):
    "Test if FILENAME is in current git repository."
    ret = [ x for x in run(['git', 'ls-files', filename]).split('\n') if x ]
    return len(ret) == 1
        
def load_data(args):
    """Load ada from file"""
    ret = None
    if os.path.exists(args['data']):
        p = open(args['data'], 'r')
        try:
            ret = json.load(p)
        except ValueError:
            pass
        p.close()
        return ret

def set_property(args):
    """Set properties"""
    data = load_data(args)
    if not data:
        data = {}

    # if property is unknown silently return
    if not properties.has_key(args['propname']):
        return None
    
    fprop = properties[args['propname']]
    
    for fn in args['files']:
        if not file_in_git(fn):
            Msg.warn('%s is not in git. run git add first.' % fn)
            continue
        if not data.has_key(fn):
            data[fn] = {}
        data[fn][args['propname']] = fprop['set'](args['propvalue'])

    p = open(args['data'], 'w')
    p.write(json.dumps(data, indent=1))
    p.close()
    

    
def parse_cmd_line():
    """Parse command line arguments"""

    args = argparse.ArgumentParser(
        description='Handle svn-like properties in git',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples: 

  Setting properties:
     git prop set mode 0600 .ssh/id_rsa
     git prop set mode 755 bin/foo

   Restoring properties:
     git prop restore
        '''
    )

    args.add_argument('--data', help='Path to database', metavar='PATH',
                      default='.gitprop')
    args.add_argument('--verbose', '-v', help='Run in verbose mode',
                      action='store_true')

    sp_cmd = args.add_subparsers(help='Command', dest='cmd')
    
    sp_cmd.add_parser('init', help='Setup hooks in .git directory')

    #_sp_cmd_restore = sp_cmd.add_parser('restore', help='Restore properties')
    #sp_cmd_restore = _sp_cmd_restore.add_subparsers(help='Command', dest='restore')a

    cmd_restore = sp_cmd.add_parser('restore', help='Restore properties')
    cmd_restore.add_argument('files', help='Files', nargs='*')

    
    
    cmd_set = sp_cmd.add_parser('set', help='Set properties')
    cmd_set.add_argument('propname', help='property name', choices=properties.keys() )
    cmd_set.add_argument('propvalue', help='property value')
    cmd_set.add_argument('files', help='Files', nargs='+')

    
    cmd_dump = sp_cmd.add_parser('dump', help='Dump properties')
    cmd_dump.add_argument('files', help='Files', nargs='*')

    
    ret = args.parse_args().__dict__
    return ret





def __init__():
    args = parse_cmd_line()
    print args

    if args['cmd'] == 'set':
        set_property(args)

    
if __name__ == "__main__":
    __init__()
